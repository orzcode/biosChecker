name: moboFetcher (weekly)

on:
  schedule:
    - cron: "0 6 * * 0" # (This will trigger at 6:00PM NZT every Sunday.)
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  run-tasks:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0
          # pulls all commits

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Use the Node.js version your app requires

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps --no-shell

      # Install Puppeteer dependencies
      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    
      # Install node-html-to-image
      - name: Install node-html-to-image
        run: npm install node-html-to-image

      # Run the tasks
      - name: Run mobofetcher task
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PGHOST: ${{ secrets.PGHOST }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_WEBHOOK_VERSIONCHECKER: ${{ secrets.DISCORD_WEBHOOK_VERSIONCHECKER }}
          DISCORD_WEBHOOK_NOTIFYUSERS: ${{ secrets.DISCORD_WEBHOOK_NOTIFYUSERS }}
          DISCORD_WEBHOOK_MOBOFETCHER: ${{ secrets.DISCORD_WEBHOOK_MOBOFETCHER }}
          DISCORD_WEBHOOK_STATSCHARTS: ${{ secrets.DISCORD_WEBHOOK_STATSCHARTS }}
        run: node public/js/moboFetcher.js

      # Commit and push changes to models.json (if modified)
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check for changes in the working directory and staging area
          if git diff --quiet public/data/models.json && git diff --cached --quiet public/data/models.json; then
            echo "No changes to models.json. Skipping commit and push."
          else
            git add public/data/models.json
            git commit -m "Update models.json via daily workflow"

            # Stash any remaining unstaged changes before rebasing (prevents the error)
            git stash --include-untracked

            # Fetch latest changes and rebase safely
            git fetch origin main
            git rebase origin/main || (git rebase --abort && echo "Rebase failed, skipping rebase")

            # Apply stashed changes back (if there were any)
            git stash pop || echo "No stash to apply"

            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Notify on workflow success
      - name: Notify success
        if: success()
        run: echo "Scheduled task ran successfully!"

      # Optional: Notify on workflow failure
      - name: Notify failure
        if: failure()
        run: echo "Scheduled task failed to complete."
